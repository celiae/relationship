import Head from "next/head";
import React, { useEffect, useState } from "react";
import {
  Anchor,
  Button,
  Grid,
  SegmentedControl,
  Select,
  Space,
  Textarea,
  TextInput,
} from "@mantine/core";
import { useRouter } from "next/router";
import Network from "types/network";
import { DatePicker } from "@mantine/dates";
import { EDUCATION, INITIAL_NETWORK } from "app/constant";
import { Gender } from "./network-form-gender";
import { UpdatePost } from "app/utils";
interface Props {
  method: string;
}

export default function NetworkForm({ method }: Props) {
  const router = useRouter();

  const [data, setData] = useState<Network>(INITIAL_NETWORK);
  const [value, setValue] = useState<string[]>([]);

  useEffect(() => {
    if (router.isReady && method === "UPDATE") {
      const { id } = router.query;
      fetch(`/api/network/${id}`)
        .then((res) => res.json())
        .then((data) => {
          setData(data);
        });
    }
  }, [router.isReady]);

  function dataChange(key: string, value: string) {
    switch (key) {
      case "name":
        setData({ ...data, name: value });
        break;
      case "email":
        setData({ ...data, email: value });
        break;
      case "address":
        setData({ ...data, address: value });
        break;
      case "qq":
        setData({ ...data, qq: value });
        break;
      case "wechat":
        setData({ ...data, wechat: value });
        break;
      case "phone":
        setData({ ...data, phone: value });
        break;
      case "relation":
        setData({ ...data, relation: value });
        break;
      default:
        break;
    }
  }

  function genderChange(value: string) {
    setData({ ...data, gender: value });
  }
  function educationChange(value: string) {
    setData({ ...data, education: value });
  }

  return (
    <>
      <Head>
        <title>Network | Relationship</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Anchor
        onClick={() => {
          router.push("/network");
        }}
        target="_blank"
      >
        Back
      </Anchor>
      <Grid>
        <Grid.Col span={3}>
          <TextInput
            value={data.name == null ? "" : data.name}
            onChange={(event) => {
              dataChange("name", event.target.value);
            }}
            label="Full name"
            radius="md"
          />
        </Grid.Col>
        <Grid.Col span={2}>
          <Select
            label="Education"
            placeholder="Pick one"
            onChange={educationChange}
            value={data.education == null ? "" : data.education}
            data={EDUCATION}
          />
        </Grid.Col>
      </Grid>
      <Grid>
        <Grid.Col span={4}>
          <SegmentedControl
            value={data.gender == null ? "" : data.gender}
            onChange={genderChange}
            data={Gender}
          />
        </Grid.Col>
      </Grid>

      <Grid>
        <Grid.Col span={2}>
          <TextInput
            value={data.qq == null ? "" : data.qq}
            onChange={(event) => {
              dataChange("qq", event.target.value);
            }}
            label="qq"
            radius="md"
          />
        </Grid.Col>
        <Grid.Col span={4}>
          <TextInput
            value={data.wechat == null ? "" : data.wechat}
            onChange={(event) => {
              dataChange("wechat", event.target.value);
            }}
            label="Wechat"
            radius="md"
          />
        </Grid.Col>
      </Grid>
      <Grid>
        <Grid.Col span={3}>
          <TextInput
            value={data.phone == null ? "" : data.phone}
            onChange={(event) => {
              dataChange("phone", event.target.value);
            }}
            label="Phone"
            radius="md"
          />
        </Grid.Col>
      </Grid>
      <Grid>
        <Grid.Col span={4}>
          <TextInput
            value={data.email == null ? "" : data.email}
            onChange={(event) => {
              dataChange("email", event.target.value);
            }}
            label="Email"
            radius="md"
          />
        </Grid.Col>
      </Grid>
      <Grid>
        <Grid.Col span={7}>
          <TextInput
            value={data.address == null ? "" : data.address}
            onChange={(event) => {
              dataChange("address", event.target.value);
            }}
            label="Address"
            radius="md"
          />
        </Grid.Col>
      </Grid>
      <Grid>
        <Grid.Col span={3}>
          <DatePicker
            value={
              data.birthday == null ? new Date("") : new Date(data.birthday)
            }
            placeholder="Pick date"
            label="Event date"
            withAsterisk
          />
        </Grid.Col>
      </Grid>
      <Grid>
        <Grid.Col span={7}>
          <Textarea
            value={data.relation == null ? "" : data.relation}
            onChange={(event) => {
              dataChange("relation", event.target.value);
            }}
            label="Relation"
            withAsterisk
          />
        </Grid.Col>
      </Grid>
      <Space h="md" />
      <Button
        uppercase
        onClick={async () => {
          await UpdatePost(method, data);
          router.push("/network");
        }}
      >
        {method === "UPDATE" ? "Update" : "Create"}
      </Button>
    </>
  );
}
